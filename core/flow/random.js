// Generated by CoffeeScript 1.6.3
var cache, cached, cacher, config, git, randomFile, randomize, sortByLength;

git = require('../helpers/git');

config = require('../helpers/configuration');

cacher = require('../helpers/cacher');

cached = cacher.cached;

cache = cacher.cache;

sortByLength = function(a, b) {
  return b.length - a.length;
};

randomize = function(tree) {
  var rand;
  rand = Math.floor(Math.random() * tree.length);
  while (tree[rand].path === 'subdir') {
    rand = Math.floor(Math.random() * tree.length);
  }
  return rand;
};

randomFile = function(tree) {
  var entry, rand, _i, _len, _ref;
  rand = randomize(tree);
  _ref = config.whitelist.sort(sortByLength);
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    entry = _ref[_i];
    if (tree[rand].path.substr(tree[rand].path.length - entry.length, tree[rand].path.length) === entry) {
      return tree[rand];
    }
  }
  return randomFile(tree);
};

module.exports = {
  method: "get",
  path: "/random",
  handler: function(req, res) {
    if (req.session.auth == null) {
      return res.send(401, "no access_token");
    }
    if (req.session.auth["access_token"] == null) {
      return res.send(401, "no access_token");
    } else {
      if (config["access_token"] == null) {
        git.authenticate({
          type: "oauth",
          token: req.session.auth["access_token"]
        });
      }
      return git.user.get({}, function(err, data) {
        var username;
        if (err != null) {
          return console.log(err);
        } else {
          username = data.login;
          if (!cached({
            key: "repo-list-" + username
          })) {
            return git.repos.getAll({
              "type": "member",
              "per_page": 100
            }, function(err, data) {
              var rand, repo;
              if (err != null) {
                return console.log(err);
              } else {
                cache({
                  key: "repo-list-" + username,
                  value: data
                });
                rand = Math.floor(Math.random() * data.length);
                repo = data[rand].name;
                if (!cached({
                  key: "commit-list-" + username + "-" + repo
                })) {
                  return git.repos.getCommits({
                    "user": username,
                    "repo": repo,
                    "per_page": 100
                  }, function(err, data) {
                    if (err != null) {
                      return console.log(err);
                    } else {
                      cache({
                        key: "commit-list-" + username + "-" + repo,
                        value: data
                      });
                      if (!cached({
                        key: "tree-list-" + username + "-repo-" + repo + "-master"
                      })) {
                        return git.gitdata.getTree({
                          "user": username,
                          "repo": repo,
                          "sha": data[rand].sha,
                          "recursive": true
                        }, function(err, data) {
                          var file;
                          if (err != null) {
                            return console.log(err);
                          } else {
                            cache({
                              key: "tree-list-" + username + "-repo-" + repo + "-master",
                              value: data
                            });
                            file = randomFile(data.tree);
                            return git.gitdata.getBlob({
                              "user": username,
                              "repo": repo,
                              "sha": file.sha
                            }, function(err, data) {
                              if (err != null) {
                                return console.log(err);
                              } else {
                                if (data.encoding === 'base64') {
                                  data.content = new Buffer(data.content, 'base64').toString();
                                }
                                data.path = repo + "/" + file.path;
                                return res.send(data);
                              }
                            });
                          }
                        });
                      }
                    }
                  });
                }
              }
            });
          }
        }
      });
    }
  }
};
